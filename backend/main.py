from fastapi import FastAPI, WebSocket
from fastapi.middleware.cors import CORSMiddleware
from pipeline import query_pipeline # Gi·∫£ s·ª≠ pipeline.py ch·ª©a query_pipeline
import json
import uvicorn
import google.generativeai as genai
from agents.voice_agent import recognize_audio # Gi·∫£ s·ª≠ voice_agent.py ch·ª©a recognize_audio

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"], # Trong production n√™n gi·ªõi h·∫°n l·∫°i ['http://your-frontend-domain.com']
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.websocket("/chat")
async def websocket_chat(websocket: WebSocket):
    await websocket.accept()
    while True:
        try:
            # üì• Nh·∫≠n d·ªØ li·ªáu
            message = await websocket.receive()

            # üì• N·∫øu l√† text (query t·ª´ ng∆∞·ªùi d√πng g√µ ho·∫∑c t·ª´ frontend g·ª≠i l·∫°i sau khi nh·∫≠n d·∫°ng gi·ªçng n√≥i)
            if message["type"] == "websocket.receive" and "text" in message:
                try:
                    data = json.loads(message["text"])
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è Received invalid JSON text: {message['text']}")
                    await websocket.send_text(json.dumps({"error": "Invalid JSON format received."}))
                    continue # Ch·ªù message ti·∫øp theo

                # Tr∆∞·ªùng h·ª£p text th√¥ng th∆∞·ªùng (c√≥ key "query")
                if isinstance(data, dict) and data.get("query"):
                    query = data["query"]
                    history = data.get("history", []) # L·∫•y history t·ª´ frontend g·ª≠i l√™n
                    print(f"üìù Text query received: '{query}' | History items: {len(history)}")

                    # G·ªçi query_pipeline ƒë·ªÉ x·ª≠ l√Ω v√† stream c√¢u tr·∫£ l·ªùi
                    # query_pipeline s·∫Ω t·ª± x·ª≠ l√Ω vi·ªác g·ª≠i stream, metadata, [END] qua websocket
                    await query_pipeline(query, websocket, history=history)
                    print(f"‚úÖ Pipeline finished for query: '{query}'")

                else:
                    # C√≥ th·ªÉ nh·∫≠n c√°c lo·∫°i text message kh√°c, c·∫ßn x·ª≠ l√Ω n·∫øu c√≥
                    print(f"‚ö†Ô∏è Received text message without 'query' key or not a dict: {data}")
                    # Kh√¥ng n√™n b√°o l·ªói n·∫øu kh√¥ng ch·∫Øc ch·∫Øn, c√≥ th·ªÉ l√† message h·ªá th·ªëng kh√°c
                    # await websocket.send_text(json.dumps({"error": "Invalid text format, expected JSON with 'query' key."}))

            # üì• N·∫øu l√† binary (audio file)
            elif message["type"] == "websocket.receive" and "bytes" in message:
                audio_bytes = message["bytes"]
                print(f"üéôÔ∏è Audio received ({len(audio_bytes)} bytes)")

                # üß† Chuy·ªÉn audio th√†nh text b·∫±ng Gemini Flash
                recognized_text = await recognize_audio(audio_bytes)
                print(f"üß† Recognized text: '{recognized_text}'")

                # --- FIX ---
                # 1. G·ª¨I NGAY K·∫æT QU·∫¢ NH·∫¨N D·∫†NG V·ªÄ FRONTEND
                # Frontend s·∫Ω d√πng text n√†y ƒë·ªÉ c·∫≠p nh·∫≠t √¥ input V√Ä t·ª± ƒë·ªông g·ª≠i l·∫°i nh∆∞ m·ªôt query m·ªõi (theo Lu·ªìng A)
                await websocket.send_text(json.dumps({
                    "type": "recognized_text",
                    "text": recognized_text or "" # G·ª≠i chu·ªói r·ªóng n·∫øu kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c g√¨
                }, ensure_ascii=False))
                print(f"‚úÖ Sent recognized text back to frontend.")

                # 2. KH√îNG G·ªåI query_pipeline ·ªû ƒê√ÇY N·ªÆA
                # V√¨ frontend (theo Lu·ªìng A) s·∫Ω g·ª≠i l·∫°i query n√†y qua k√™nh text message.
                # Tr√°nh vi·ªác x·ª≠ l√Ω query 2 l·∫ßn.
                # --- END FIX ---

            # X·ª≠ l√Ω websocket ƒë√≥ng t·ª´ client
            elif message["type"] == "websocket.disconnect":
                print(f"üîå WebSocket disconnected: {message.get('code')}")
                break # Tho√°t v√≤ng l·∫∑p

            else:
                # C√°c lo·∫°i message kh√°c kh√¥ng x·ª≠ l√Ω
                print(f"‚ö†Ô∏è Unsupported message type received: {message['type']}")


        except WebSocketDisconnect: # B·∫Øt l·ªói client ng·∫Øt k·∫øt n·ªëi ƒë·ªôt ng·ªôt
             print(f"üîå WebSocket client disconnected abruptly.")
             break
        except Exception as e:
            error_message = f"An error occurred: {str(e)}"
            print(f"‚ùå {error_message}")
            try:
                # C·ªë g·∫Øng g·ª≠i l·ªói v·ªÅ client tr∆∞·ªõc khi ƒë√≥ng
                await websocket.send_text(json.dumps({"error": error_message}))
                # ƒê√≥ng k·∫øt n·ªëi m·ªôt c√°ch ch·ªß ƒë·ªông t·ª´ server khi c√≥ l·ªói nghi√™m tr·ªçng
                await websocket.close(code=1011) # Internal Error
            except Exception as close_err:
                # N·∫øu g·ª≠i l·ªói ho·∫∑c ƒë√≥ng c≈©ng b·ªã l·ªói th√¨ ch·ªâ c·∫ßn ghi log
                 print(f"‚ùå Error sending error/closing WebSocket: {close_err}")
            break # Tho√°t v√≤ng l·∫∑p khi c√≥ l·ªói

    print("WebSocket connection closed.")


# Th√™m th∆∞ vi·ªán c·∫ßn thi·∫øt n·∫øu ch∆∞a c√≥
from starlette.websockets import WebSocketDisconnect

# ‚úÖ H√†m kh·ªüi ch·∫°y app FastAPI
if __name__ == "__main__":
    # Nh·ªõ c√†i ƒë·∫∑t: pip install uvicorn fastapi[all] google-generativeai python-dotenv
    # C·∫ßn t·∫°o file .env ho·∫∑c ƒë·∫∑t bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_API_KEY
    # Ho·∫∑c thay tr·ª±c ti·∫øp genai.configure(api_key="YOUR_API_KEY") ·ªü tr√™n
    print("Starting FastAPI server...")
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)

